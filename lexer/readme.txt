After much office-houring we realized that both String and Comments needed to have their own states so that they could do their thing separate from the rest of the Lexer. We had trouble with some of the escaping, since the characters needed to be escaped in the Lexer so that it would read in certain characters in the actual .cl file, so that made our code quite messy. These two took us quite some time and were quite the headache since there were so many things that needed to be taken into account, and strange cases.
For comments, which we began with, we tried to read in the entire comment with some large regex, but we were unable to figure out the correct regext that might be used, especially in the case of nested comments. So eventually, and with the suggestion of a TA, we decided that we needed a State and to be able to simply read the comment line by line so that we would catch nested comments, and we tried to include the regex that would be needed for escaping strings within the comments that might contain more comment-flags.

We created a bunch of text cases while going through, trying to mimic the tests that we thought the server was testing us with. This was generally quite useful, although some of the tests have too-cryptic names for us to figure out what they meant. Unfortunately we did not think to copy all of the cases somewhere for posterity, but when creating bad.cl and good.cl we tried to include most of what we could remember running.
To create bad.cl we mainly played with Strings, and all of the different ways in which they can return variations on "Invalid String". In the end we were able to catch some of the cases, but not all of the cases that we display in bad.cl. We tested backslashes, comments in strings, and integer ranges to ensure that they all worked as they should.
For good.cl we took the base from the atoi.cl case given in the cool examples, and HEAVILY modified it to fit examples that we had to work our way through while setting up the correct way to go through strings and properly return either a string, or an Invalid String error. We tested nested comments, new lines, new line characters, backslashes and how our String state handles them.